# Generated by Django 3.0.4 on 2020-06-16 04:56

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import apps.core.fields
import apps.core.operations
import apps.core.validators
import apps.titles.models
import apps.titles.storages


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('content', '0001_initial'),
    ]

    operations = [
        django.contrib.postgres.operations.BtreeGinExtension(),
        django.contrib.postgres.operations.TrigramExtension(),
        apps.core.operations.ArrayValuesMaxSimilarity(),
        migrations.CreateModel(
            name='Title',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('_active', models.BooleanField(default=True)),
                (
                    'date_created',
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name='date created'
                    ),
                ),
                (
                    'date_modified',
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name='date modified'
                    ),
                ),
                (
                    'slug',
                    apps.core.fields.SlugField(
                        blank=True,
                        default='',
                        max_length=255,
                        validators=[apps.core.validators.slug_validator],
                    ),
                ),
                (
                    'inner_status',
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, 'off'),
                            (1, 'on moderation'),
                            (2, 'slug duplicate'),
                            (3, 'on'),
                        ],
                        db_index=True,
                        default=1,
                        verbose_name='inner_status',
                    ),
                ),
                ('season', models.PositiveSmallIntegerField(db_index=True)),
                (
                    'poster',
                    apps.core.fields.BaseImageField(
                        null=True,
                        storage=apps.titles.storages.TitlePosterStorage(),
                        upload_to=apps.titles.models.title_poster_path,
                    ),
                ),
                (
                    'wallpaper',
                    apps.core.fields.BaseImageField(
                        blank=True,
                        null=True,
                        storage=apps.titles.storages.TitleWallpaperStorage(),
                        upload_to=apps.titles.models.title_wallpaper_path,
                    ),
                ),
                (
                    'wallpaper_mobile',
                    apps.core.fields.BaseImageField(
                        blank=True,
                        null=True,
                        storage=apps.titles.storages.TitleWallpaperMobileStorage(),
                        upload_to=apps.titles.models.title_wallpaper_mobile_path,
                    ),
                ),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                (
                    'duration',
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name='duration'
                    ),
                ),
                ('description', models.TextField()),
                (
                    'other_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='alternative name',
                    ),
                ),
                (
                    'tags',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='tags',
                    ),
                ),
                (
                    'characters',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='characters',
                    ),
                ),
                (
                    'total_episodes',
                    models.CharField(
                        blank=True,
                        default='',
                        max_length=10,
                        verbose_name='общее кол-во эп.',
                    ),
                ),
                (
                    'year',
                    models.CharField(
                        max_length=4,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex='^(19|20)(\\d{2})$'
                            )
                        ],
                        verbose_name='year',
                    ),
                ),
                (
                    'year_season',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(1, 'зима'), (2, 'весна'), (3, 'лето'), (4, 'осень')],
                        db_index=True,
                        null=True,
                        verbose_name='season',
                    ),
                ),
                (
                    'status',
                    models.PositiveSmallIntegerField(
                        choices=[(1, 'завершенный'), (2, 'онгоинг'), (3, 'анонс')],
                        db_index=True,
                        null=True,
                        verbose_name='status',
                    ),
                ),
                (
                    'age_rating',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, 'G — нет возрастных ограничений'),
                            (2, 'PG — рекомендуется присутствие родителей'),
                            (3, 'PG-13 — не желателен к просмотру до 13 лет'),
                            (
                                4,
                                'R — до 17 лет к просмотру только в присутствии родителей',
                            ),
                            (5, 'NC-17 — до 17 лет к просмотру запрещен'),
                        ],
                        db_index=True,
                        null=True,
                        verbose_name='age rating',
                    ),
                ),
                (
                    'source',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, 'манга'),
                            (2, 'манхва'),
                            (3, 'игра'),
                            (4, 'ранобэ'),
                            (5, 'оригинальная идея'),
                            (6, 'книга'),
                        ],
                        db_index=True,
                        null=True,
                        verbose_name='source',
                    ),
                ),
                (
                    'type',
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, 'TV сериал'),
                            (2, 'полнометражный фильм'),
                            (3, 'OVA'),
                            (4, 'ONA'),
                            (5, 'спешл'),
                        ],
                        db_index=True,
                        null=True,
                        verbose_name='type',
                    ),
                ),
                (
                    'release_day',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, 'понедельник'),
                            (2, 'вторник'),
                            (3, 'среда'),
                            (4, 'четверг'),
                            (5, 'пятница'),
                            (6, 'суббота'),
                            (7, 'воскресенье'),
                        ],
                        db_index=True,
                        null=True,
                        verbose_name='week day of release',
                    ),
                ),
                (
                    'countries',
                    models.ManyToManyField(
                        blank=True, to='content.Country', verbose_name='countries'
                    ),
                ),
                (
                    'genres',
                    models.ManyToManyField(
                        blank=True, to='content.Genre', verbose_name='genres'
                    ),
                ),
            ],
            options={'verbose_name': 'title', 'verbose_name_plural': 'titles',},
        ),
        migrations.CreateModel(
            name='TitleRelevantData',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('_active', models.BooleanField(default=True)),
                (
                    'rating_total',
                    models.PositiveIntegerField(default=0, editable=False),
                ),
                (
                    'rating_average',
                    models.DecimalField(
                        decimal_places=2, default=0, editable=False, max_digits=4
                    ),
                ),
                ('views_total', models.PositiveIntegerField(default=0, editable=False)),
                ('rank', models.PositiveIntegerField(default=0, editable=False)),
                (
                    'rank_previous',
                    models.PositiveIntegerField(default=0, editable=False),
                ),
            ],
            options={'abstract': False,},
        ),
        migrations.CreateModel(
            name='TitleWatchOrder',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('_active', models.BooleanField(default=True)),
            ],
            options={'abstract': False,},
        ),
        migrations.CreateModel(
            name='WatchOrder',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('_active', models.BooleanField(default=True)),
                (
                    'description',
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                (
                    'type',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, 'TV сериал'),
                            (2, 'полнометражный фильм'),
                            (3, 'OVA'),
                            (4, 'ONA'),
                            (5, 'спешл'),
                        ],
                        null=True,
                        verbose_name='type',
                    ),
                ),
                (
                    'year',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex='^(19|20)(\\d{2})$'
                            ),
                            django.core.validators.MaxLengthValidator(4),
                        ],
                        verbose_name='year',
                    ),
                ),
                ('ordering', models.PositiveSmallIntegerField()),
                (
                    'title',
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='titles.Title',
                    ),
                ),
                (
                    'title_watch_order',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='titles.TitleWatchOrder',
                    ),
                ),
            ],
            options={'ordering': ('ordering',),},
        ),
        migrations.AddField(
            model_name='titlewatchorder',
            name='titles',
            field=models.ManyToManyField(
                related_name='watch_orders',
                through='titles.WatchOrder',
                to='titles.Title',
            ),
        ),
        migrations.AddField(
            model_name='title',
            name='relevant_data',
            field=models.OneToOneField(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='titles.TitleRelevantData',
            ),
        ),
        migrations.AddField(
            model_name='title',
            name='studios',
            field=models.ManyToManyField(
                blank=True, to='content.Studio', verbose_name='studios'
            ),
        ),
        migrations.AddIndex(
            model_name='title',
            index=django.contrib.postgres.indexes.GinIndex(
                fields=['name'], name='titles_titl_name_6c4295_gin'
            ),
        ),
    ]
